# -*- coding: utf-8 -*-
"""Kaggle_import_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ULJwi_GElXe6GhK-oTGwMOmp14wy66Wm
"""

!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d pmigdal/alien-vs-predator-images

from zipfile import ZipFile
file_name='alien-vs-predator-images.zip'
with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print("done")

import keras

from keras.layers import Dense,Flatten,Input
from keras.applications.vgg16 import VGG16
from glob import glob
from keras.models import Model
import matplotlib.pyplot as plt
from keras.applications.vgg16 import preprocess_input

img_size=[224,224]
train_path='data/train'
dev_path='data/validation'

vgg=VGG16(input_shape=img_size + [3], weights='imagenet', include_top=False)

for layer in vgg.layers:
  layer.trainable=False

folders = glob('data/train/*')

x=Flatten()(vgg.output)
x=Dense(1,activation='sigmoid')(x)

model=Model(inputs=vgg.input,outputs=x)

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory(train_path,
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'binary')
test_set = test_datagen.flow_from_directory(dev_path,
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

model.fit_generator(training_set,epochs=3,validation_data=test_set,steps_per_epoch=len(training_set),validation_steps=len(test_set))

model.summary()

model.save("my_model.h5") #using h5 extension
print("model saved!!!")

# example of loading an image with the Keras API
from keras.preprocessing.image import load_img
# load the image
image = load_img("/content/maxresdefault (2).jpg", target_size=(224, 224))

from keras.applications.vgg16 import preprocess_input
# prepare the image for the VGG model
image = preprocess_input(image)

from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import array_to_img
image = img_to_array(image)

image.shape

image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

def start():
  from keras.models import load_model

  model = load_model('my_model.h5')
#model.summary()

model.predict(image)





from tkinter import *

root= Tk()

